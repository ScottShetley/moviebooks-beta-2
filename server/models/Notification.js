// server/models/Notification.js
import mongoose from 'mongoose';

/**
 * Represents a Notification sent to a User within the application.
 * Notifications are generated by user actions (likes, favorites) or potentially system events.
 */
const notificationSchema = new mongoose.Schema(
  {
    recipientRef: {
      // The user who receives the notification.
      type: mongoose.Schema.Types.ObjectId,
      required: true,
      ref: 'User',
    },
    senderRef: {
      // The user who triggered the notification (e.g., liked the post).
      type: mongoose.Schema.Types.ObjectId,
      ref: 'User', // Can be null for system notifications (though not currently used).
    },
    type: {
      // The category of the notification.
      type: String,
      required: true,
      enum: ['NEW_CONNECTION', 'LIKE', 'FAVORITE'], // Defines the allowed notification types.
    },
    connectionRef: {
      // The specific connection this notification relates to (if applicable).
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Connection',
      // Conditionally required: Must be present for LIKE, FAVORITE, and NEW_CONNECTION types.
      // This function checks the 'type' field of the document being saved.
      required: function () {
        return ['LIKE', 'FAVORITE', 'NEW_CONNECTION'].includes(this.type);
      },
    },
    message: {
      // The display text of the notification.
      type: String,
      required: true, // Ensure a message is always provided.
      trim: true,
      maxlength: [255, 'Notification message cannot exceed 255 characters.'], // Added reasonable length limit
    },
    read: {
      // Flag indicating if the recipient has marked the notification as read.
      type: Boolean,
      default: false, // Default to unread.
    },
  },
  {
    timestamps: true, // Adds createdAt and updatedAt automatically.
  }
);

// --- Indexes ---

// Compound index optimized for fetching a specific user's notifications,
// allowing efficient filtering by 'read' status and sorting by creation date (newest first).
notificationSchema.index({ recipientRef: 1, read: 1, createdAt: -1 });

// Create the Mongoose model from the schema.
const Notification = mongoose.model('Notification', notificationSchema);

// Export the model for use in other parts of the application.
export default Notification;
